<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo安装NexT主题</title>
      <link href="/2020/04/25/Hexo%E5%AE%89%E8%A3%85NexT%E4%B8%BB%E9%A2%98/"/>
      <url>/2020/04/25/Hexo%E5%AE%89%E8%A3%85NexT%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><a href="">上篇文章</a>介绍了Hexo个人博客的安装，可以看出来，Hexo默认的功能和界面很简洁，如果我们想拥有更个性化点儿的功能和主题，那么对于Hexo来说这也是一件很轻松的事。</p><p>Hexo官网提供了主题库，大家可以从里边选出自己心仪的主题下载到本地，并经过一步设置即可切换到新的主题。</p><p>本文推荐一款挺好用的主题<a href="">NexT</a>。推荐理由：界面简洁漂亮、社区活跃（目前：Start 15.2k）、集成许多实用的组件，如：字数统计、评论、分享、访问量等等。</p><a id="more"></a><h2 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 切换到博客根目录</span><br><span class="line">cd blog</span><br><span class="line"># 创建next主题目录</span><br><span class="line">mkdir themes&#x2F;next</span><br><span class="line"># 下载最新稳定版next主题</span><br><span class="line">curl -s https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;iissnan&#x2F;hexo-theme-next&#x2F;releases&#x2F;latest | grep tarball_url | cut -d &#39;&quot;&#39; -f 4 | wget -i - -O- | tar -zx -C themes&#x2F;next --strip-components&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>打开<code>站点配置文件</code>， 找到<code>theme</code>字段，并将其值更改为<code>next</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客</title>
      <link href="/2020/04/24/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/04/24/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>快速、简洁且高效的博客框架</p></blockquote><p>以上引自<a href="https://hexo.io" target="_blank" rel="noopener">Hexo官方</a>的介绍。对于想拥有独立、稳定、没有广告的个人博客系统，Hexo是一个不错的选择。以下是Hexo的几个特性：</p><ul><li>可以使用Markdown语法编写博客；</li><li>基于Node.js把源文件（.md等）编译成静态项目（.html、.css、.js等）；</li><li>可以一键部署到GitHub Pages, Heroku 或其他平台；</li><li>支持插件集成和丰富的插件生态；</li></ul><p>本文将带领大家从零开始搭建属于自己的博客系统。但是搭建博客只是基础，后续会持续介绍博客的美化、功能的丰富、博客的运维等。</p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="安装Node环境"><a href="#安装Node环境" class="headerlink" title="安装Node环境"></a>安装Node环境</h3><p>Mac使用brew安装。<br>（不知道brew是什么？如果你是一名软件开发人员，喷血推荐安装<a href="https://homebrew.bandcamp.com" target="_blank" rel="noopener">brew</a>。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>其它环境安装Node.js可以去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js官网下载安装包</a>安装。<br>安装完Node.js=后会自动安装npm。</p><h3 id="使用npm安装Hexo"><a href="#使用npm安装Hexo" class="headerlink" title="使用npm安装Hexo"></a>使用npm安装Hexo</h3><p><code>npm install -g hexo-cli</code> </p><h3 id="创建博客项目"><a href="#创建博客项目" class="headerlink" title="创建博客项目"></a>创建博客项目</h3><p><code>hexo init blog</code><br>如果找不到hexo，可以使用<code>npx</code><br><code>npx hexo init blog</code></p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server 或 hexo s</span><br></pre></td></tr></table></figure><p>到此，使用Hexo搭建的博客系统就已经安装成功了。<br>可通过浏览器输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 访问博客系统。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Oracle</title>
      <link href="/2020/04/22/Docker%E5%AE%89%E8%A3%85Oracle/"/>
      <url>/2020/04/22/Docker%E5%AE%89%E8%A3%85Oracle/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Oracle官方没有Oracle的Docker镜像。但是可以使用以下两种方式安装Docker版的Oracle：</p><ol><li>使用非官方的Docker镜像；</li><li>在Oracle官方下载Oracle所需要的安装包，自己制作Oracle镜像。 </li></ol><p>方式一适合个人学习使用，安装快捷，安装方式见：<a href="">Docker安装Oracle-非官方镜像</a>。<br>如果不信任非官方的镜像、或者在非官方镜像没有找到自己需要的版本，可以使用方式二，本文使用方式二安装。</p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><ol><li>Centos7安装Docker<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh --mirror Aliyun &amp;&amp; sudo systemctl start docker &amp;&amp; sudo systemctl enable docker</span><br></pre></td></tr></table></figure></li><li>Centos8安装Docker<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;7&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.el7.x86_64.rpm </span><br><span class="line">curl -fsSL get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh --mirror Aliyun &amp;&amp; sudo systemctl start docker &amp;&amp; sudo systemctl enable docker</span><br></pre></td></tr></table></figure>Docker的配置和优化可以参考<a href="">Docker的安装和配置</a>。<br>其它操作系统安装Docker的方式见Docker官网。</li></ol><h3 id="下载Oracle安装包和Dockerfile项目"><a href="#下载Oracle安装包和Dockerfile项目" class="headerlink" title="下载Oracle安装包和Dockerfile项目"></a>下载Oracle安装包和Dockerfile项目</h3><p>如果是无桌面的linux服务器，可以用其它电脑先下载好这两个文件，在上传到Linux服务器上。</p><ol><li><p>下载Dockerfile项目<br>Dockerfile项目包含了多个Oracle版本的Dockerfile。下载Dockerfile项目有两种方式：</p><p>1) 去<a href="https://github.com/oracle/docker-images" target="_blank" rel="noopener">Github下载Dockerfile</a>。 依次点击页面的：<code>Clone or download -&gt; Download ZIP</code>下载，下载后的文件：<code>master.zip</code>，需要把文件解压。</p><p>2）使用Git命令下载：<code>git clone https://github.com/oracle/docker-images.git</code></p></li><li><p>下载Oracle安装包<br><a href="https://www.oracle.com/database/technologies/oracle-database-software-downloads.html" target="_blank" rel="noopener">Oracle安装包下载地址</a>，选择对应的操作系统和Oracle版本号。本次安装选择<code>12.2.0.1.0</code>，下载后的文件：<code>linuxx64_12201_database.zip</code>，文件大约3.45G。</p></li></ol><h3 id="构建Oracle镜像"><a href="#构建Oracle镜像" class="headerlink" title="构建Oracle镜像"></a>构建Oracle镜像</h3><ol><li>把Oracle安装包复制到Dockerfile项目中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp linuxx64_12201_database.zip docker-images&#x2F;OracleDatabase&#x2F;SingleInstance&#x2F;dockerfiles</span><br></pre></td></tr></table></figure></li><li>执行该目录的构建Oracle镜像脚本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd docker-images&#x2F;OracleDatabase&#x2F;SingleInstance&#x2F;dockerfiles</span><br><span class="line">.&#x2F;buildDockerImage.sh -v 12.2.0.1 -e</span><br></pre></td></tr></table></figure></li></ol><h3 id="启动Oracle容器"><a href="#启动Oracle容器" class="headerlink" title="启动Oracle容器"></a>启动Oracle容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建Oracle本地存储目录</span><br><span class="line">mkdir -p ~&#x2F;docker&#x2F;oracle12c</span><br><span class="line"># 授予该目录权限，要不然启动容器时创建数据库会提示权限不足</span><br><span class="line">sudo chmod -R a+w ~&#x2F;docker&#x2F;oracle12c&#x2F;</span><br><span class="line"># 启动Oracle容器</span><br><span class="line">sudo docker run --name oracle \</span><br><span class="line">-p 1521:1521 -e ORACLE_CHARACTERSET&#x3D;AL32UTF8 -e ORACLE_PWD&#x3D;oracle -e ORACLE_SID&#x3D;ORCLCDB -v ~&#x2F;docker&#x2F;oracle12c:&#x2F;opt&#x2F;oracle&#x2F;oradata \</span><br><span class="line">oracle&#x2F;database:12.2.0.1-ee</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>–name</td><td>容器名称</td></tr><tr><td>-p 1521:1521</td><td>连接地址，程序连接需要的端口号</td></tr><tr><td>-e ORACLE_CHARACTERSET=AL32UTF8</td><td>数据库编码</td></tr><tr><td>-e ORACLE_PWD=oracle</td><td>数据库密码</td></tr><tr><td>-e ORACLE_SID=ORCLCDB</td><td>数据库实例名</td></tr><tr><td>-v ~/docker/oracle12c:/opt/oracle/oradata</td><td>数据存储在本地，容器重启后数据不会丢失</td></tr><tr><td>oracle/database:12.2.0.1-ee</td><td>使用该镜像启动</td></tr></tbody></table><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>到此，数据库已经安装完成，下一步边可以开始使用Oracle。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">端口:1521</span><br><span class="line">实例名：ORCLCDB</span><br><span class="line">用户名：sys</span><br><span class="line">密码：oracle</span><br></pre></td></tr></table></figure><h3 id="其它补充"><a href="#其它补充" class="headerlink" title="其它补充"></a>其它补充</h3><h4 id="重装数据库"><a href="#重装数据库" class="headerlink" title="重装数据库"></a>重装数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 在主机删除数据库目录</span><br><span class="line">sudo rm -rf ~&#x2F;docker&#x2F;oracle12c&#x2F;</span><br><span class="line"># 在主机删除Oracle镜像</span><br><span class="line">sudo docker rm -f oracle</span><br><span class="line"># ---安装重新</span><br><span class="line"># 创建Oracle本地存储目录</span><br><span class="line">mkdir -p ~&#x2F;docker&#x2F;oracle12c</span><br><span class="line"># 授予该目录权限，不然启动容器时创建数据库会提示权限不足</span><br><span class="line">sudo chmod -R a+w ~&#x2F;docker&#x2F;oracle12c&#x2F;</span><br><span class="line"># 启动Oracle容器</span><br><span class="line">sudo docker run --name oracle \</span><br><span class="line">-p 1521:1521 -e ORACLE_CHARACTERSET&#x3D;AL32UTF8 -e ORACLE_PWD&#x3D;oracle -e ORACLE_SID&#x3D;ORCLCDB -v ~&#x2F;docker&#x2F;oracle12c:&#x2F;opt&#x2F;oracle&#x2F;oradata \</span><br><span class="line">oracle&#x2F;database:12.2.0.1-ee</span><br></pre></td></tr></table></figure><h4 id="保存镜像到文件"><a href="#保存镜像到文件" class="headerlink" title="保存镜像到文件"></a>保存镜像到文件</h4><p>可以把此镜像保存成文件：<code>oracle-database-12.2.0.1-ee.tar</code>，传输到其它服务器  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 把镜像保存到成文件</span><br><span class="line">docker save oracle&#x2F;database:12.2.0.1-ee&gt;oracle-database-12.2.0.1-ee.tar</span><br><span class="line"># 复制到其它服务器</span><br><span class="line">scp oracle-database-12.2.0.1-ee.tar [user]@[ip]:~&#x2F;</span><br></pre></td></tr></table></figure><h4 id="加载文件到镜像"><a href="#加载文件到镜像" class="headerlink" title="加载文件到镜像"></a>加载文件到镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 加载文件到本地镜像</span><br><span class="line">docker load&lt;oracle-database-12.2.0.1-ee.tar</span><br></pre></td></tr></table></figure><h4 id="镜像上传到阿里云"><a href="#镜像上传到阿里云" class="headerlink" title="镜像上传到阿里云"></a>镜像上传到阿里云</h4><ol><li>首先得有个阿里云账号，<a href="https://www.aliyun.com" target="_blank" rel="noopener">点击去阿里云官网</a>；</li><li>搜索 <code>容器镜像服务</code>，进入到<code>容器镜像服务</code>的<code>控制台</code>；</li><li>创建 <code>命名空间</code>；    </li><li>创建 <code>镜像仓库</code>；</li><li>客户端上传镜像到阿里云：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 登录到阿里云镜像</span><br><span class="line">sudo docker login --username&#x3D;[阿里云登录名] registry.cn-beijing.aliyuncs.com</span><br><span class="line"># 本地的镜像重新打标签</span><br><span class="line">sudo docker tag oracle&#x2F;database:12.2.0.1-ee [阿里云分配的镜像地址]&#x2F;oracle12:oracle&#x2F;database:12.2.0.1-ee</span><br><span class="line"># 上传镜像</span><br><span class="line">sudo docker push [阿里云分配的镜像地址]&#x2F;&#x2F;oracle12:[镜像版本号]</span><br></pre></td></tr></table></figure>更具体的使用方式可以参考阿里云容器镜像的使用说明。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/21/hello-world/"/>
      <url>/2020/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p><code>System.out.println(&quot;Hello World&quot;);</code></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
