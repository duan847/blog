<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CentOS挂载磁盘</title>
      <link href="/2020/04/27/CentOS%E6%8C%82%E8%BD%BD%E7%A3%81%E7%9B%98/"/>
      <url>/2020/04/27/CentOS%E6%8C%82%E8%BD%BD%E7%A3%81%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>本文使用阿里云CentOS7操作系统，在阿里云购买的存储需要自己手动挂载到主机上。</p><h2 id="列出块设备信息"><a href="#列出块设备信息" class="headerlink" title="列出块设备信息"></a>列出块设备信息</h2><p><code>lsblk</code>命令列出块设备信息。<br>块设备信息包括：硬盘、闪存盘、cd-ROM等等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# lsblk</span><br><span class="line">NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda    253:0    0  40G  0 disk </span><br><span class="line">└─vda1 253:1    0  40G  0 part &#x2F;</span><br><span class="line">vdb    253:16   0  60G  0 disk </span><br><span class="line">└─vdb1 253:17   0  60G  0 part &#x2F;file_storage_data</span><br><span class="line">vdc    253:32   0  50G  0 disk</span><br></pre></td></tr></table></figure><p>从以上信息可以看出共有三个块设备（vda、vdb、vdc），除了vdc没有挂载，其它两个都已经被挂载到主机。  </p><p>下面，开始把vdc挂载到主机。</p><a id="more"></a><h2 id="挂载磁盘"><a href="#挂载磁盘" class="headerlink" title="挂载磁盘"></a>挂载磁盘</h2><ol><li>格式化磁盘的类型<br>vdc默认在<code>/dev/vdc</code>目录中，先把<code>/dev/vdc</code>格式化成<code>ext4</code>类型。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 格式化成ext4类型</span></span><br><span class="line">mkfs -t ext4 /dev/vdc</span><br></pre></td></tr></table></figure></li><li>创建要挂载的目录<code>mnt_data</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt_data</span><br></pre></td></tr></table></figure></li><li>挂载磁盘到<code>mnt_data</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/vdc /mnt_data</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置开机自动挂载"><a href="#配置开机自动挂载" class="headerlink" title="配置开机自动挂载"></a>配置开机自动挂载</h2><p>如果不配置开机自动挂载，当重启主机后，挂载的磁盘就消失了。<br>修改<code>/etc/fstab</code>，在文件最后添加一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/vdc /mnt_data ext4 defaults 0 0</span><br></pre></td></tr></table></figure><h2 id="挂载完成"><a href="#挂载完成" class="headerlink" title="挂载完成"></a>挂载完成</h2><p>使用<code>df -h</code>查看磁盘使用空间。可以看到新挂载的磁盘<code>/mnt_data</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> 挂载磁盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown使用教程</title>
      <link href="/2020/04/26/Markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2020/04/26/Markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，如：标题、加粗字体、有序列表、表格等等。<br>Markdown的文档后缀为.md、.markdown。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><ol><li><p>使用<code>#</code>号可表示1-6级标题，一级标题对应一个<code>#</code>号，二级标题对应两个<code>#</code>号，以此类推。（常用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure></li><li><p>使用<code>=</code>和<code>-</code>标记一级和二级标题 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我展示的是一级标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">我展示的是二级标题</span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><ol><li>在文字末尾添加两个空格和回车；</li><li>连续两个回车，但是中间会产生一个空行。</li></ol><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown支持三种字体：<em>斜体文本</em>、<strong>粗体文本</strong>、<strong><em>粗斜体文本</em></strong>，每种字体都有两种书写方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*           _斜体文本_</span><br><span class="line">**粗体文本**          __粗体文本__</span><br><span class="line">***粗斜体文本***       ___粗斜体文本___</span><br></pre></td></tr></table></figure><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>可以使用三个或三个以上星号<code>*</code>、减号<code>-</code>实现分割线，中间可以有空格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">----------</span><br></pre></td></tr></table></figure><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>文字添加删除线效果：<del>我有删除线</del>，在文字两端分别添加两个波浪线<code>~~</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~我有删除线~~</span><br></pre></td></tr></table></figure><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>文字添加下划线效果：<u>我有下划线</u>，文字用<code>&lt;u&gt;&lt;/u&gt;</code>标签标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;我有下划线&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown支持有序列表和无序列表。</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>使用数字并加上点号<code>.</code>标记：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure></p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>使用星号<code>*</code>、加号<code>+</code>或减号<code>-</code>标记：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure></p><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>在子列表中的选项添加四个空格：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">   - 第一项嵌套的第一个元素</span><br><span class="line">   - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">   - 第二项嵌套的第一个元素</span><br><span class="line">   - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>使用大于号<code>&gt;</code>实现引用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 时间就像海绵里的水，只要愿挤，总还是有的。 -鲁迅</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h3><p>要实现单行代码效果：<code>System.out.println(&quot;Hello World&quot;);</code>，在文字两端分别添加一个`：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;System.out.println(&quot;Hello World&quot;);&#96;</span><br></pre></td></tr></table></figure><h3 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h3><p>多行文本两端分别使用四个空格、一个tab或三个`包围,都可以实现多行代码块。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="直接显示链接"><a href="#直接显示链接" class="headerlink" title="直接显示链接"></a>直接显示链接</h3><p><a href="https://www.duanjw.com" target="_blank" rel="noopener">https://www.duanjw.com</a>：<code>https://www.duanjw.com</code></p><h3 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a>文字链接</h3><p><a href="https://www.duanjw.com" target="_blank" rel="noopener">博客首页</a>：<code>[博客首页](https://www.duanjw.com)</code></p><h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><p>这个链接用1作为网址变量 [博客首页][1]<br>这个链接用home作为网址变量 [博客首页][home]<br>然后在文档的结尾为变量（网址）赋值<br>[1]: <a href="http://www.duanjw.com" target="_blank" rel="noopener">http://www.duanjw.com</a><br>[home]: <a href="http://www.duanjw.com" target="_blank" rel="noopener">http://www.duanjw.com</a>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这个链接用1作为网址变量 [博客首页][1]  </span><br><span class="line">这个链接用home作为网址变量 [博客首页][home]  </span><br><span class="line">然后在文档的结尾为变量（网址）赋值</span><br><span class="line">[1]: http:&#x2F;&#x2F;www.duanjw.com</span><br><span class="line">[home]: http:&#x2F;&#x2F;www.duanjw.com</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>姓名</th><th>性别</th></tr></thead><tbody><tr><td>张三</td><td>男</td></tr><tr><td>小红</td><td>女</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  姓名   | 性别  |</span><br><span class="line">|  -  | -  |</span><br><span class="line">| 张三  | 男 |</span><br><span class="line">| 小红  | 女 |</span><br></pre></td></tr></table></figure><p>标题行的下一行可以设置对其方式，一个<code>-</code>是左对齐：  </p><ul><li>-: 设置内容和标题栏居右对齐；  </li><li>:- 设置内容和标题栏居左对齐；  </li><li>:-: 设置内容和标题栏居中对齐。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux监听文件变化并触发指令</title>
      <link href="/2020/04/25/linux%E7%9B%91%E5%90%AC%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96%E5%B9%B6%E8%A7%A6%E5%8F%91%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/04/25/linux%E7%9B%91%E5%90%AC%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96%E5%B9%B6%E8%A7%A6%E5%8F%91%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Linux系统使用inotify监听文件的变化（创建、删除、修改等），并触发指令。<br>例如：当某个文件被修改后，自动重启电脑。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y inotify-tools</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>实现效果：当<code>/root/video*.jar</code>文件修改后，自动执行脚本<code>/root/deplay.sh</code></p><ol><li>创建监听脚本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;inotifywait -m -e CLOSE_WRITE &#x2F;root&#x2F;video*.jar |</span><br><span class="line">while read events;</span><br><span class="line">do</span><br><span class="line">    echo $events;</span><br><span class="line">    sh &#x2F;root&#x2F;deplay.sh    </span><br><span class="line">    echo &quot;reload video&quot;</span><br><span class="line">done&#39; &gt; &#x2F;root&#x2F;inotify-reboot.sh</span><br></pre></td></tr></table></figure></li><li>运行监听脚本<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh inotify-reboot.sh</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h2 id="参数描述"><a href="#参数描述" class="headerlink" title="参数描述"></a>参数描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">inotifywait:</span><br><span class="line">-m :实时监控。</span><br><span class="line">-d：后台运行。</span><br><span class="line">-r：递归，对子目录监控。</span><br><span class="line">-e：监控事件。以下</span><br><span class="line">access：检测文件访问事件。</span><br><span class="line">close_write：写入关闭事件。</span><br><span class="line">modify：文件发生变化。</span><br><span class="line">attrib：文件属性变化事件。</span><br><span class="line">delete：文件被删除。</span><br><span class="line">--timefmt ：当在--format选项中使用%T时，--timefrt选项则可以用来指定自定义的符合strftime规范的时间格式，此时间格式可用的格式符可以通过strftime的手册页获取；--timefrt后常用的参数是&#39;%d&#x2F;%m&#x2F;%y %H:%M&#39;；</span><br><span class="line">--format ：自定义inotifywait的输出格式，如--format &#39;%T %w %f&#39;；常用的格式符如下：</span><br><span class="line">%w：显示被监控文件的文件名；</span><br><span class="line">%f：如果发生某事件的对象是目录，则显示被监控目录的名字；默认显示为空串；</span><br><span class="line">%T：使用--timefmt选项中自定义的时间格式.</span><br><span class="line">eg. inotifywait -mrq --timefmt &#39;%d&#x2F;%m&#x2F;%y %H:%M&#39; --format &#39;%T %w%f&#39; -e close_write &#x2F;data #输出时间</span><br><span class="line">eg. innotifywait -mrq --format &#39;%w%f&#39; -e create,close_write,delete &#x2F;data #简化输出</span><br><span class="line">-m :永远监控，实时监控。</span><br><span class="line">-d：后台运行。</span><br><span class="line">-q：仅打印监控事件的信息。</span><br><span class="line">-r：递归，对子目录监控。</span><br><span class="line">-e：监控事件。以下</span><br><span class="line">access：检测文件访问事件。</span><br><span class="line">close_write：写入关闭事件。</span><br><span class="line">modify：文件发生变化。</span><br><span class="line">attrib：文件属性变化事件。</span><br><span class="line">delete：文件被删除。</span><br><span class="line">--timefmt ：当在--format选项中使用%T时，--timefrt选项则可以用来指定自定义的符合strftime规范的时间格式，此时间格式可用的格式符可以通过strftime的手册页获取；--timefrt后常用的参数是  &#39;%d&#x2F;%m&#x2F;%y %H:%M&#39;；</span><br><span class="line">--format ：自定义inotifywait的输出格式，如--format &#39;%T %w %f&#39;；常用的格式符如下：</span><br><span class="line">%w：显示被监控文件的文件名.</span><br><span class="line">%f：如果发生某事件的对象是目录，则显示被监控目录的名字；默认显示为空串；</span><br><span class="line">%T：使用--timefmt选项中自定义的时间格式.</span><br><span class="line">eg. inotifywait -mrq --timefmt &#39;%d&#x2F;%m&#x2F;%y %H:%M&#39; --format &#39;%T %w%f&#39; -e close_write &#x2F;data #输出时间.</span><br><span class="line">eg. innotifywait -mrq --format &#39;%w%f&#39; -e create,close_write,delete &#x2F;data #</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac包管理神器Homebrew</title>
      <link href="/2020/04/25/Mac%E5%8C%85%E7%AE%A1%E7%90%86%E7%A5%9E%E5%99%A8Homebrew/"/>
      <url>/2020/04/25/Mac%E5%8C%85%E7%AE%A1%E7%90%86%E7%A5%9E%E5%99%A8Homebrew/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Homebrew是使用ruby开发的Mac的软件包管理器。可以使用一行命令安装很多开发软件。<br>使用Mac开发软件的同学，强力推荐安装。  </p><p>例如使用Homebrew安装Redis：<code>brew install redis</code>，安装完毕。<br>例如使用Homebrew安装有界面软件Oracle：<code>brew cask install docker</code>，安装完毕。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>终端执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>终端执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li>安装软件，如：<code>brew install oclint</code></li><li>安装有界面软件，如：<code>brew cask install dockert</code></li><li>卸载软件，如：<code>brew uninstall oclint</code></li><li>搜索软件，如：<code>brew search oclint</code></li><li>更新软件，如：<code>brew upgrade oclint</code></li><li>查看安装列表， 如：<code>brew list</code></li><li>更新Homebrew，如：<code>brew update</code></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker存储空间清理</title>
      <link href="/2020/04/25/Docker%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E6%B8%85%E7%90%86/"/>
      <url>/2020/04/25/Docker%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E6%B8%85%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="清理无用容器和镜像"><a href="#清理无用容器和镜像" class="headerlink" title="清理无用容器和镜像"></a>清理无用容器和镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system prune</span><br></pre></td></tr></table></figure><p>该指令默认会清除所有如下资源：</p><ul><li>已停止的容器（container）</li><li>未被任何容器所使用的卷（volume）</li><li>未被任何容器所关联的网络（network）</li><li>所有悬空镜像（image）。<br>该指令默认只会清除悬空镜像，未被使用的镜像不会被删除。<br>添加 -a 或 –all 参数后，可以一并清除所有未使用的镜像和悬空镜像。<br>可以添加 -f 或 –force 参数用以忽略相关告警确认信息。<br>指令结尾处会显示总计清理释放的空间大小。<a id="more"></a></li></ul><h2 id="清理日志"><a href="#清理日志" class="headerlink" title="清理日志"></a>清理日志</h2><p>Docker容器的日志默认存储在主机的<code>/var/lib/docker/containers/</code>目录。  </p><ul><li><p>删除某个容器的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除某个容器的日志，[container_id]替换为容器的id</span></span><br><span class="line">echo " " &gt; /var/lib/docker/containers/[container_id]/*-json.log</span><br></pre></td></tr></table></figure></li><li><p>使用脚本删除所有容器日志  </p><ol><li>创建脚本：<code>clean_dockerlog.sh</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">echo '</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh </span></span><br><span class="line">logs=`find /var/lib/docker/containers/ -name *-json.log`  </span><br><span class="line">for docker_log in $logs  </span><br><span class="line">do  </span><br><span class="line">echo " " &gt; $docker_log  </span><br><span class="line">done</span><br><span class="line">' &gt; clean_dockerlog.sh</span><br></pre></td></tr></table></figure></li><li>执行脚本<br>创建完脚本后，以后需要清理日志只需要执行<code>sh clean_dockerlog.sh</code>。</li></ol><h2 id="删除none镜像"><a href="#删除none镜像" class="headerlink" title="删除none镜像"></a>删除none镜像</h2><p>none是Docker产生的临时镜像，可以使用以下命令批量删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images | grep "none" | awk '&#123;print $3&#125;')</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Docker清理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装Docker</title>
      <link href="/2020/04/25/CentOS%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2020/04/25/CentOS%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>CentOS7安装Docker，并开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh --mirror Aliyun &amp;&amp; sudo systemctl start docker &amp;&amp; sudo systemctl enable docker</span><br></pre></td></tr></table></figure><p>CentOS8安装Docker，并开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm </span><br><span class="line"></span><br><span class="line">curl -fsSL get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh --mirror Aliyun &amp;&amp; sudo systemctl start docker &amp;&amp; sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h2 id="配置镜像加速（可选）"><a href="#配置镜像加速（可选）" class="headerlink" title="配置镜像加速（可选）"></a>配置镜像加速（可选）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 国内镜像地址写入到配置文件</span></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">    "registry-mirrors": [</span><br><span class="line">        "https://1nj0zren.mirror.aliyuncs.com",</span><br><span class="line">        "https://docker.mirrors.ustc.edu.cn",</span><br><span class="line">        "http://f1361db2.m.daocloud.io",</span><br><span class="line">        "https://registry.docker-cn.com"</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启Docker</span></span><br><span class="line">sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo安装NexT主题</title>
      <link href="/2020/04/25/Hexo%E5%AE%89%E8%A3%85NexT%E4%B8%BB%E9%A2%98/"/>
      <url>/2020/04/25/Hexo%E5%AE%89%E8%A3%85NexT%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><a href="/2020/04/24/Hexo搭建个人博客/">上篇文章</a>介绍了Hexo个人博客的安装，可以看出来，Hexo默认的功能和界面很简洁，如果我们想拥有更个性化点儿的功能和主题，那么对于Hexo来说这也是一件很轻松的事。</p><p>Hexo官网提供了主题库，大家可以从里边选出自己心仪的主题下载到本地，并经过一步设置即可切换到新的主题。</p><p>本文推荐一款挺好用的主题<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a>。推荐理由：界面简洁漂亮、社区活跃（目前：Start 15.2k）、集成许多实用的组件，如：字数统计、评论、分享、访问量等等。</p><a id="more"></a><h2 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 切换到博客根目录</span><br><span class="line">cd blog</span><br><span class="line"># 创建next主题目录</span><br><span class="line">mkdir themes&#x2F;next</span><br><span class="line"># 下载最新稳定版next主题</span><br><span class="line">curl -s https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;iissnan&#x2F;hexo-theme-next&#x2F;releases&#x2F;latest | grep tarball_url | cut -d &#39;&quot;&#39; -f 4 | wget -i - -O- | tar -zx -C themes&#x2F;next --strip-components&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>打开<code>站点配置文件</code>， 找到<code>theme</code>字段，并将其值更改为<code>next</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 个人博客 </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客</title>
      <link href="/2020/04/24/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/04/24/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>快速、简洁且高效的博客框架</p></blockquote><p>以上引自<a href="https://hexo.io" target="_blank" rel="noopener">Hexo官方</a>的介绍。对于想拥有独立、稳定、没有广告的个人博客系统，Hexo是一个不错的选择。以下是Hexo的几个特性：</p><ul><li>可以使用Markdown语法编写博客；</li><li>基于Node.js把源文件（.md等）编译成静态项目（.html、.css、.js等）；</li><li>可以一键部署到GitHub Pages, Heroku 或其他平台；</li><li>支持插件集成和丰富的插件生态；</li></ul><p>本文将带领大家从零开始搭建属于自己的博客系统。但是搭建博客只是基础，后续会持续介绍博客的美化、功能的丰富、博客的运维等。</p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="安装Node环境"><a href="#安装Node环境" class="headerlink" title="安装Node环境"></a>安装Node环境</h3><p>Mac使用brew安装。<br>（不知道brew是什么？如果你是一名软件开发人员，喷血推荐安装<a href="https://homebrew.bandcamp.com" target="_blank" rel="noopener">brew</a>。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>其它环境安装Node.js可以去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js官网下载安装包</a>安装。<br>安装完Node.js=后会自动安装npm。</p><h3 id="使用npm安装Hexo"><a href="#使用npm安装Hexo" class="headerlink" title="使用npm安装Hexo"></a>使用npm安装Hexo</h3><p><code>npm install -g hexo-cli</code> </p><h3 id="创建博客项目"><a href="#创建博客项目" class="headerlink" title="创建博客项目"></a>创建博客项目</h3><p><code>hexo init blog</code><br>如果找不到hexo，可以使用<code>npx</code><br><code>npx hexo init blog</code></p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server 或 hexo s</span><br></pre></td></tr></table></figure><p>到此，使用Hexo搭建的博客系统就已经安装成功了。<br>可通过浏览器输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 访问博客系统。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Oracle</title>
      <link href="/2020/04/22/Docker%E5%AE%89%E8%A3%85Oracle/"/>
      <url>/2020/04/22/Docker%E5%AE%89%E8%A3%85Oracle/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Oracle官方没有Oracle的Docker镜像。但是可以使用以下两种方式安装Docker版的Oracle：</p><ol><li>使用非官方的Docker镜像；</li><li>在Oracle官方下载Oracle所需要的安装包，自己制作Oracle镜像。 </li></ol><p>方式一适合个人学习使用，安装快捷，安装方式见：<a href="">Docker安装Oracle-非官方镜像</a>。<br>如果不信任非官方的镜像、或者在非官方镜像没有找到自己需要的版本，可以使用方式二，本文使用方式二安装。</p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><ol><li>Centos7安装Docker<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh --mirror Aliyun &amp;&amp; sudo systemctl start docker &amp;&amp; sudo systemctl enable docker</span><br></pre></td></tr></table></figure></li><li>Centos8安装Docker<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;7&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.el7.x86_64.rpm </span><br><span class="line">curl -fsSL get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh --mirror Aliyun &amp;&amp; sudo systemctl start docker &amp;&amp; sudo systemctl enable docker</span><br></pre></td></tr></table></figure>Docker的配置和优化可以参考<a href="">Docker的安装和配置</a>。<br>其它操作系统安装Docker的方式见Docker官网。</li></ol><h3 id="下载Oracle安装包和Dockerfile项目"><a href="#下载Oracle安装包和Dockerfile项目" class="headerlink" title="下载Oracle安装包和Dockerfile项目"></a>下载Oracle安装包和Dockerfile项目</h3><p>如果是无桌面的Linux服务器，可以用其它电脑先下载好这两个文件，在上传到Linux服务器上。</p><ol><li><p>下载Dockerfile项目<br>Dockerfile项目包含了多个Oracle版本的Dockerfile。下载Dockerfile项目有两种方式：</p><p>1) 去<a href="https://github.com/oracle/docker-images" target="_blank" rel="noopener">Github下载Dockerfile</a>。 依次点击页面的：<code>Clone or download -&gt; Download ZIP</code>下载，下载后的文件：<code>master.zip</code>，需要把文件解压。</p><p>2）使用Git命令下载：<code>git clone https://github.com/oracle/docker-images.git</code></p></li><li><p>下载Oracle安装包<br><a href="https://www.oracle.com/database/technologies/oracle-database-software-downloads.html" target="_blank" rel="noopener">Oracle安装包下载地址</a>，选择对应的操作系统和Oracle版本号。本次安装选择<code>12.2.0.1.0</code>，下载后的文件：<code>linuxx64_12201_database.zip</code>，文件大约3.45G。</p></li></ol><h3 id="构建Oracle镜像"><a href="#构建Oracle镜像" class="headerlink" title="构建Oracle镜像"></a>构建Oracle镜像</h3><ol><li>把Oracle安装包复制到Dockerfile项目中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp linuxx64_12201_database.zip docker-images&#x2F;OracleDatabase&#x2F;SingleInstance&#x2F;dockerfiles</span><br></pre></td></tr></table></figure></li><li>执行该目录的构建Oracle镜像脚本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd docker-images&#x2F;OracleDatabase&#x2F;SingleInstance&#x2F;dockerfiles</span><br><span class="line">.&#x2F;buildDockerImage.sh -v 12.2.0.1 -e</span><br></pre></td></tr></table></figure></li></ol><h3 id="启动Oracle容器"><a href="#启动Oracle容器" class="headerlink" title="启动Oracle容器"></a>启动Oracle容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建Oracle本地存储目录</span><br><span class="line">mkdir -p ~&#x2F;docker&#x2F;oracle12c</span><br><span class="line"># 授予该目录权限，要不然启动容器时创建数据库会提示权限不足</span><br><span class="line">sudo chmod -R a+w ~&#x2F;docker&#x2F;oracle12c&#x2F;</span><br><span class="line"># 启动Oracle容器</span><br><span class="line">sudo docker run --name oracle \</span><br><span class="line">-p 1521:1521 -e ORACLE_CHARACTERSET&#x3D;AL32UTF8 -e ORACLE_PWD&#x3D;oracle -e ORACLE_SID&#x3D;ORCLCDB -v ~&#x2F;docker&#x2F;oracle12c:&#x2F;opt&#x2F;oracle&#x2F;oradata \</span><br><span class="line">oracle&#x2F;database:12.2.0.1-ee</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>–name</td><td>容器名称</td></tr><tr><td>-p 1521:1521</td><td>连接地址，程序连接需要的端口号</td></tr><tr><td>-e ORACLE_CHARACTERSET=AL32UTF8</td><td>数据库编码</td></tr><tr><td>-e ORACLE_PWD=oracle</td><td>数据库密码</td></tr><tr><td>-e ORACLE_SID=ORCLCDB</td><td>数据库实例名</td></tr><tr><td>-v ~/docker/oracle12c:/opt/oracle/oradata</td><td>数据存储在本地，容器重启后数据不会丢失</td></tr><tr><td>oracle/database:12.2.0.1-ee</td><td>使用该镜像启动</td></tr></tbody></table><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>到此，数据库已经安装完成，下一步边可以开始使用Oracle。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">端口:1521</span><br><span class="line">实例名：ORCLCDB</span><br><span class="line">用户名：sys</span><br><span class="line">密码：oracle</span><br></pre></td></tr></table></figure><h3 id="其它补充"><a href="#其它补充" class="headerlink" title="其它补充"></a>其它补充</h3><h4 id="重装数据库"><a href="#重装数据库" class="headerlink" title="重装数据库"></a>重装数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 在主机删除数据库目录</span><br><span class="line">sudo rm -rf ~&#x2F;docker&#x2F;oracle12c&#x2F;</span><br><span class="line"># 在主机删除Oracle镜像</span><br><span class="line">sudo docker rm -f oracle</span><br><span class="line"># ---安装重新</span><br><span class="line"># 创建Oracle本地存储目录</span><br><span class="line">mkdir -p ~&#x2F;docker&#x2F;oracle12c</span><br><span class="line"># 授予该目录权限，不然启动容器时创建数据库会提示权限不足</span><br><span class="line">sudo chmod -R a+w ~&#x2F;docker&#x2F;oracle12c&#x2F;</span><br><span class="line"># 启动Oracle容器</span><br><span class="line">sudo docker run --name oracle \</span><br><span class="line">-p 1521:1521 -e ORACLE_CHARACTERSET&#x3D;AL32UTF8 -e ORACLE_PWD&#x3D;oracle -e ORACLE_SID&#x3D;ORCLCDB -v ~&#x2F;docker&#x2F;oracle12c:&#x2F;opt&#x2F;oracle&#x2F;oradata \</span><br><span class="line">oracle&#x2F;database:12.2.0.1-ee</span><br></pre></td></tr></table></figure><h4 id="保存镜像到文件"><a href="#保存镜像到文件" class="headerlink" title="保存镜像到文件"></a>保存镜像到文件</h4><p>可以把此镜像保存成文件：<code>oracle-database-12.2.0.1-ee.tar</code>，传输到其它服务器  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 把镜像保存到成文件</span><br><span class="line">docker save oracle&#x2F;database:12.2.0.1-ee&gt;oracle-database-12.2.0.1-ee.tar</span><br><span class="line"># 复制到其它服务器</span><br><span class="line">scp oracle-database-12.2.0.1-ee.tar [user]@[ip]:~&#x2F;</span><br></pre></td></tr></table></figure><h4 id="加载文件到镜像"><a href="#加载文件到镜像" class="headerlink" title="加载文件到镜像"></a>加载文件到镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 加载文件到本地镜像</span><br><span class="line">docker load&lt;oracle-database-12.2.0.1-ee.tar</span><br></pre></td></tr></table></figure><h4 id="镜像上传到阿里云"><a href="#镜像上传到阿里云" class="headerlink" title="镜像上传到阿里云"></a>镜像上传到阿里云</h4><ol><li>首先得有个阿里云账号，<a href="https://www.aliyun.com" target="_blank" rel="noopener">点击去阿里云官网</a>；</li><li>搜索 <code>容器镜像服务</code>，进入到<code>容器镜像服务</code>的<code>控制台</code>；</li><li>创建 <code>命名空间</code>；    </li><li>创建 <code>镜像仓库</code>；</li><li>客户端上传镜像到阿里云：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 登录到阿里云镜像</span><br><span class="line">sudo docker login --username&#x3D;[阿里云登录名] registry.cn-beijing.aliyuncs.com</span><br><span class="line"># 本地的镜像重新打标签</span><br><span class="line">sudo docker tag oracle&#x2F;database:12.2.0.1-ee [阿里云分配的镜像地址]&#x2F;oracle12:oracle&#x2F;database:12.2.0.1-ee</span><br><span class="line"># 上传镜像</span><br><span class="line">sudo docker push [阿里云分配的镜像地址]&#x2F;&#x2F;oracle12:[镜像版本号]</span><br></pre></td></tr></table></figure>更具体的使用方式可以参考阿里云容器镜像的使用说明。</li></ol>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Oracle </tag>
            
            <tag> Oracle12c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/21/hello-world/"/>
      <url>/2020/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p><code>System.out.println(&quot;Hello World&quot;);</code></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
